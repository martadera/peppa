{"version":3,"sources":["components/Tab.tsx","components/AppTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","props","val","Tab","onClick","className","data-class","AppTable","activeCard","table","gameResult","cardPairs","checkNumbers","tab","getRandomInt","Math","floor","random","filter","el","length","push","mapping","map","i","key","e","currentTarget","classList","remove","divs","document","querySelectorAll","array","Array","from","forEach","style","pointerEvents","setTimeout","getAttribute","window","location","reload","add","clickCart","Title","h1","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uhBAIA,IAMMA,EAAYC,IAAOC,IAAV,KAQS,SAAAC,GAAK,OAAIA,EAAMC,OAMxBC,EApB8D,SAAC,GAAoB,IAAnBD,EAAkB,EAAlBA,IAAKE,EAAa,EAAbA,QAChF,OACI,kBAACN,EAAD,CAAWO,UAAU,cAAcC,aAAYJ,EAAKE,QAASA,EAASF,IAAKA,K,yICAnF,IAsEMJ,EAAYC,IAAOC,IAAV,KAQAO,EA9EqB,WAEhC,IACIC,EADAC,EAAkB,GAElBC,EAAqB,EACnBC,EAA2B,IAEZ,SAAfC,EAAgBC,GAClB,IAAMC,EAAuBC,KAAKC,MAAsB,GAAhBD,KAAKE,UACzCJ,EAAIK,QAAO,SAACC,GAAD,OAAgBA,IAAE,uBAAqBL,EAArB,WAAyCM,OAAS,GAC/EX,EAAMY,KAAN,uBAA2BP,EAA3B,SACAF,EAAaH,IACNI,EAAIO,OAAS,IACpBR,EAAaH,GAIrBG,CAAaH,GAEb,IAwCMa,EAAUb,EAAMc,KAAI,SAACJ,EAAIK,GAAL,OACtB,kBAAC,EAAD,CAAKnB,UAAU,cAAcoB,IAAKD,EAAGpB,QAAS,SAACsB,GAAD,OAzChC,SAACA,GAGf,IAFAlB,EAAakB,EAAEC,eACJC,UAAUC,OAAO,UACH,IAArBlB,EAAUS,OAAd,CAMI,IAAIU,EAAOC,SAASC,iBAA8B,YAC9CC,EAAuBC,MAAMC,KAAKL,GAEtCG,EAAMG,SAAQ,SAAAjB,GACVA,EAAGkB,MAAMC,cAAgB,UAG7B3B,EAAU,GAAKH,EAEf+B,YAAW,WACH5B,EAAU,GAAG6B,aAAa,gBAAkB7B,EAAU,GAAG6B,aAAa,cAEnD,OADnB9B,GAEI+B,OAAOC,SAASC,SAIpBhC,EAAUyB,SAAQ,SAAAjB,GACdA,EAAGS,UAAUgB,IAAI,aAGzBjC,EAAUS,OAAS,EACnBa,EAAMG,SAAQ,SAAAjB,GACVA,EAAGkB,MAAMC,cAAgB,YAE9B,UA9BH3B,EAAU,GAAKH,EAqCyCqC,CAAUnB,IAAIxB,IAAKiB,OAInF,OACI,kBAAC,EAAD,KAAYG,I,6GCjEpB,IASMwB,EAAQ/C,IAAOgD,GAAV,KAKIC,EAdO,WAClB,OACI,oCACI,kBAACF,EAAD,gCACA,kBAAC,EAAD,QCEQG,QACW,cAA7BR,OAAOC,SAASQ,UAEe,UAA7BT,OAAOC,SAASQ,UAEhBT,OAAOC,SAASQ,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASuB,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.25c782d5.chunk.js","sourcesContent":["// --CORE\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Tab: React.FC<{ className: string, val: string, onClick: Function }> = ({val, onClick}) => {\n    return (\n        <Container className=\"hidden cart\" data-class={val} onClick={onClick} val={val}/>\n    )\n}\n\nconst Container = styled.div`\nheight: 100px;\nwidth: 100px;\nbackground-color: #000;\ntext-align: center;\nline-height: 100px;\nborder: 1px solid #C71585;\nflex: 1 0 21%;\nbackground-image: url(${props => props.val});\nbackground-size: cover, 123px;\nbackground-repeat: no-repeat;\nbackground-position: center center\n`\n\nexport default Tab\n","// --CORE\nimport React, {FunctionComponent} from 'react'\nimport styled from 'styled-components'\n// --COMPONENTS\nimport Tab from './Tab'\n\nconst AppTable: FunctionComponent = () => {\n\n    let table: string[] = []\n    let activeCard: HTMLElement\n    let gameResult: number = 0\n    const cardPairs: HTMLElement[] = []\n\n    const checkNumbers = (tab: string[]) => {\n        const getRandomInt: number = Math.floor(Math.random() * 10)\n        if (tab.filter((el: string) => el === `/images/peppa${getRandomInt}.jpg`).length < 2) {\n            table.push(`/images/peppa${getRandomInt}.jpg`)\n            checkNumbers(table)\n        } else if (tab.length < 20) {\n            checkNumbers(table)\n        }\n    }\n\n    checkNumbers(table)\n\n    const clickCart = (e: Event): void => {\n        activeCard = e.currentTarget as HTMLElement\n        activeCard.classList.remove('hidden')\n        if (cardPairs.length === 0) {\n            cardPairs[0] = activeCard\n            return\n        }\n\n        else {\n            let divs = document.querySelectorAll<HTMLElement>('div.cart')\n            let array: HTMLElement[] = Array.from(divs)\n\n            array.forEach(el=> {\n                el.style.pointerEvents = 'none'\n            })\n\n            cardPairs[1] = activeCard\n\n            setTimeout(()=> {\n                if (cardPairs[0].getAttribute('data-class') === cardPairs[1].getAttribute('data-class')) {\n                    gameResult++\n                    if (gameResult === 10) {\n                        window.location.reload()\n                    }\n                }\n                else {\n                    cardPairs.forEach(el => {\n                        el.classList.add('hidden')\n                    })\n                }\n                cardPairs.length = 0\n                array.forEach(el=> {\n                    el.style.pointerEvents = 'auto'\n                })\n            }, 1000)\n\n        }\n    }\n\n\n    const mapping = table.map((el, i) => (\n        <Tab className=\"hidden cart\" key={i} onClick={(e: Event) => clickCart(e)} val={el}/>\n\n    ))\n\n    return (\n        <Container>{mapping}</Container>\n    )\n\n}\n\nconst Container = styled.div`\ndisplay: flex;\nmargin: auto;\nflex-wrap: wrap;\nwidth: 500px;\n\n`\n\nexport default AppTable\n","// --CORE\nimport React from 'react';\nimport styled from 'styled-components'\n// --COMPONENTS\nimport AppTable from './components/AppTable'\n\nconst App: React.FC = () => {\n    return (\n        <>\n            <Title>Memory Game - Peppa Pig</Title>\n            <AppTable/>\n        </>\n    );\n}\n\nconst Title = styled.h1`\ncolor: #DB7093;\ntext-align: center;\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'normalize.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}